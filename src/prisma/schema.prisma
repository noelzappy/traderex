// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  name            String
  tokens          Token[]
  trades          Trades[]
  scheduledTrades ScheduledTrade[]

  @@index([email], map: "email_idx")
  @@map("users")
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  type      TokenType @default(access)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@index([expiresAt], map: "expiresAt_idx")
  @@index([token], map: "token_idx")
  @@index([userId])
  @@index([type])
  @@map("tokens")
}

enum TokenType {
  access
  refresh
  resetpassword
  verifyemail
  verifyphone
}

model Trades {
  id               Int         @id @default(autoincrement())
  userId           Int
  symbol           String
  quantity         Float
  price            Float
  type             TradeType
  entryPrice       Float
  status           TradeStatus @default(open)
  exitPrice        Float?
  percentageChange Float?
  profitLoss       Float?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  user             User        @relation(fields: [userId], references: [id])
  meta             Json?

  @@index([createdAt], map: "createdAt_idx")
  @@index([symbol], map: "symbol_idx")
  @@index([type])
  @@index([userId])
  @@map("trades")
}

enum TradeType {
  buy
  sell
}

enum TradeStatus {
  open
  closed
}

model ScheduledTrade {
  id                Int                  @id @default(autoincrement())
  userId            Int
  symbol            String
  quantity          Float
  riskRewardRatio   Float
  status            ScheduledTradeStatus @default(pending)
  cancelAfter       DateTime?
  proposedEntryDate DateTime             @default(now())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @default(now()) @updatedAt
  user              User                 @relation(fields: [userId], references: [id])
  meta              Json?

  @@index([userId])
  @@index([symbol])
  @@index([createdAt])
  @@map("scheduled_trades")
}

enum ScheduledTradeStatus {
  pending
  executed
  cancelled
}
